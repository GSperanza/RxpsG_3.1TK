% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/XPSFitAlgorithms.r
\name{XPSFitAlgorithms}
\alias{XPSFitAlgorithms}
\alias{Initialize}
\alias{Generic}
\alias{Gauss}
\alias{Lorentz}
\alias{Voigt}
\alias{Sech2}
\alias{GaussLorentzProd}
\alias{GaussLorentzSum}
\alias{AsymmGauss}
\alias{AsymmLorentz}
\alias{AsymmVoigt}
\alias{AsymmGaussLorentz}
\alias{AsymmGaussVoigt}
\alias{AsymmGaussLorentzProd}
\alias{DoniachSunjic}
\alias{DoniachSunjicTail}
\alias{DoniachSunjicGauss}
\alias{DoniachSunjicGaussTail}
\alias{SimplifiedDoniachSunjic}
\alias{Linear}
\alias{ExpDecay}
\alias{PowerDecay}
\alias{Sigmoid}
\alias{HillSigmoid}
\alias{VBFermi}
\alias{VBtop}
\alias{Derivative}
\title{XPSFitAlgorithms}
\usage{
XPSFitAlgorithms()

Initialize(x, h, mu, sigma)

Generic(x)

Gauss(x, h, mu, sigma)

Lorentz(x, h, mu, sigma)

Voigt(x, h, mu, sigma, lg)

Sech2(x, h, mu, sigma)

GaussLorentzProd(x, h, mu, sigma, lg)

GaussLorentzSum(x, h, mu, sigma, lg)

AsymmGauss(x, h, mu, sigma, asym)

AsymmLorentz(x, h, mu, sigma, asym)

AsymmVoigt(x, h, mu, sigma, lg, asym)

AsymmGaussLorentz(x, h, mu, sigma, lg, asym)

AsymmGaussVoigt(x, h, mu, sigma, lg, asym, gv)

AsymmGaussLorentzProd(x, h, mu, sigma, asym, lg)

DoniachSunjic(x, h, mu, sigmaDS, asym)

DoniachSunjicTail(x, h, mu, sigmaDS, asym, tail)

DoniachSunjicGauss(x, h, mu, sigmaDS, sigmaG, asym)

DoniachSunjicGaussTail(x, h, mu, sigmaDS, sigmaG, asym, tail)

SimplifiedDoniachSunjic(x, h, mu, sigma, asym)

Linear(x, m, c, mu)

ExpDecay(x, h, mu, k, c)

PowerDecay(x, h, mu, pow, c)

Sigmoid(x, h, mu, k, c)

HillSigmoid(x, h, mu, pow, A, B)

VBFermi(x, h, mu, k)

VBtop(x, mu)

Derivative(x, mu)
}
\arguments{
\item{x}{numeric vector}

\item{h}{function amplitude}

\item{mu}{position of function center}

\item{sigma}{function full width at half maximum}

\item{lg}{mix Gauss-Lorentz}

\item{asym}{function asymmetry value}

\item{gv}{mix Gauss-Voigt}

\item{sigmaDS}{function full width at half maximum}

\item{tail}{amplitude of the spectral tail on the low BE (high KE) side}

\item{sigmaG}{full width at half maximum of superimpossed Gaussian broadening}

\item{m}{slope}

\item{c}{constant value}

\item{k}{Fermi Distribution decay rate}

\item{pow}{sigmoid decay rate}

\item{A}{Sigmoid upper limit}

\item{B}{Sigmoid lower limit}
}
\value{
Returns the selected fit algorithm.

a series of NA of length = length(x)
}
\description{
XPSFitAlgorithms groups all the definitions of the fit functions,
  the definition of fit parameters, and the initialization of the parameter
  slots of objects of class 'XPSCoreLine'.

Initialize function to initalizes parameter slot for a generic function

Generic is a function to initialize the new Fit Component Slots

The Voigt function is obtained by convolution of
  a Gauss and a Lorentz functions using the convolve() function
  based on FFT

Tail modified Gauss by an exponential function

Tail modified Gauss-Lorentz Sum modifed by using an exponential function

Tail modified Gauss-Lorentz Sum modifed by using an exponential function

Gaussian-Voigt symmetric Gaussian-Voigt function see CasaXPS

Asym Gaussian Lorentz cross product from UNIFIT Publication

Correct version of the Doniach-Sunjic function (see Wertheim PRB 25(3), 1987, (1982))
  see Leiro et al. J. El. Spectr. Rel. Phen. 128, 205, (2003)

Version of the Doniach-Sunjic function (see Wertheim PRB 25(3), 1987, (1982))
  Corrected for an exponential decay (tail) on the low BE side

Doniach Sunjic function multiplied for a Gaussian broadening

Doniach Sunjic function multiplied for a Gaussian broadening
  corrected for an exponential decay on the low BE side

see http://www.casaxps.com/help_manual/line_shapes.htm

VBtop function to store VBtop position in a CoreLine@Components slot

Derivative function to store Derivate position in a CoreLine@Components slot
}
\examples{
 \dontrun{
 XPSFitAlgorithms()
}
}
